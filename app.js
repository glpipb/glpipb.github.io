
// --- 1. CONFIGURACI√ìN DE FIREBASE ---
const firebaseConfig = {
  apiKey: "AIzaSyA5rVhtkVDeJPY0bEnLjk-_LMVN3d5pkIo",
  authDomain: "glpi-tecnologia.firebaseapp.com",
  projectId: "glpi-tecnologia",
  storageBucket: "glpi-tecnologia.firebasestorage.app",
  messagingSenderId: "195664374847",
  appId: "1:195664374847:web:88412be75b4ff8600adc8a",
  measurementId: "G-QJD3VS1V5Y"
};
// --- 2. INICIALIZACI√ìN DE FIREBASE ---
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();
const auth = firebase.auth();

// --- 3. TEMPLATES HTML ---
const dashboardHTML = `<h1>üìä Dashboard</h1><div class="dashboard-stats" id="dashboard-cards"></div><div class="card" style="margin-top: 30px;"><h2>Tickets por D√≠a (√öltimos 7 d√≠as)</h2><canvas id="ticketsChart"></canvas></div>`;
const ticketListHTML = `<div class="card"><h2 id="tickets-list-title">Tickets</h2><table id="tickets-table"><thead><tr><th>T√≠tulo</th><th>Solicitante</th><th>Ubicaci√≥n</th><th>Estado</th><th>Acciones</th></tr></thead><tbody></tbody></table></div>`;
const newTicketFormHTML = `<h1>‚ûï Crear Nuevo Ticket</h1><div class="card"><form id="new-ticket-form"><div class="form-group"><label for="title">T√≠tulo</label><input type="text" id="title" required></div><div class="form-group"><label>Descripci√≥n</label><div id="description-editor"></div></div><div style="display: flex; gap: 20px; flex-wrap: wrap;"><div class="form-group" style="flex: 1; min-width: 200px;"><label for="requester">Solicitante</label><select id="requester" required></select></div><div class="form-group" style="flex: 1; min-width: 200px;"><label for="location">Ubicaci√≥n</label><select id="location" required></select></div><div class="form-group" style="flex: 1; min-width: 150px;"><label for="priority">Prioridad</label><select id="priority"><option value="baja">Baja</option><option value="media">Media</option><option value="alta">Alta</option></select></div></div><button type="submit" class="primary">Crear Ticket</button></form></div>`;
const statisticsHTML = `<h1>üìà Centro de An√°lisis</h1><div class="card"><h2>Filtro de Periodo (para Tickets)</h2><div class="stats-filters"><div class="form-group"><label for="start-date">Fecha de Inicio</label><input type="date" id="start-date"></div><div class="form-group"><label for="end-date">Fecha de Fin</label><input type="date" id="end-date"></div><button id="generate-report-btn" class="primary">Generar Reporte</button></div></div><h2>An√°lisis de Tickets</h2><div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 25px;"><div class="card"><h3>Tickets por Estado</h3><canvas id="ticketsByStatusChart"></canvas></div><div class="card"><h3>Tickets por Prioridad</h3><canvas id="ticketsByPriorityChart"></canvas></div><div class="card"><h3>Tiempo Promedio de Resoluci√≥n</h3><div style="text-align: center; padding: 20px;"><h1 id="avg-resolution-time" style="font-size: 3em;">--</h1><p>Horas</p></div></div></div><div class="card"><h3>Flujo de Tickets (Creados vs. Cerrados)</h3><canvas id="ticket-flow-chart"></canvas></div><h2 style="margin-top: 40px;">Resumen de Inventario</h2><div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 25px;"><div class="card"><h3>Dispositivos por Categor√≠a</h3><canvas id="inventoryByCategoryChart"></canvas></div><div class="card"><h3>Computadores por SO</h3><canvas id="computersByOsChart"></canvas></div></div>`;
const genericListPageHTML = `<h1 id="page-title"></h1><div class="add-new-button-container"><button id="add-item-btn" class="primary open-form-modal-btn">A√±adir Nuevo</button></div><div class="card"><h2 id="item-list-title"></h2><table id="item-table"><thead id="item-table-head"></thead><tbody id="item-table-body"></tbody></table></div>`;
const maintenanceCalendarHTML = `<h1>üìÖ Planificaci√≥n</h1><div class="add-new-button-container"><button class="primary open-form-modal-btn" data-type="maintenance">Programar Tarea</button></div><div class="card"><div id="maintenance-calendar"></div></div>`;
const configHTML = `<h1>‚öôÔ∏è Configuraci√≥n</h1><div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;"><div class="card"><h2>Gestionar Solicitantes</h2><form id="add-requester-form" style="display:flex; gap:10px; margin-bottom: 20px;"><input type="text" id="requester-name" placeholder="Nombre del solicitante" required style="flex-grow:1;"><button type="submit" class="primary">A√±adir</button></form><ul id="requesters-list" class="config-list"></ul></div><div class="card"><h2>Gestionar Ubicaciones</h2><form id="add-location-form" style="display:flex; gap:10px; margin-bottom: 20px;"><input type="text" id="location-name" placeholder="Nombre de la ubicaci√≥n" required style="flex-grow:1;"><button type="submit" class="primary">A√±adir</button></form><ul id="locations-list" class="config-list"></ul></div></div>`;

// --- 4. CONFIGURACI√ìN Y FUNCIONES DE RENDERIZADO ---
const inventoryCategoryConfig = { computers: { title: 'Computadores', titleSingular: 'Computador', fields: { brand: { label: 'Marca', type: 'text' }, model: { label: 'Modelo', type: 'text' }, serial: { label: 'N/Serie', type: 'text' }, user: { label: 'Usuario', type: 'text' }, cpu: { label: 'CPU', type: 'text' }, ram: { label: 'RAM (GB)', type: 'text' }, storage: { label: 'Almacenamiento (GB)', type: 'text' }, os: { label: 'Sistema Operativo', type: 'text' }, licenciaWindows: { label: 'Licencia Windows', type: 'text' }, tipoOffice: { label: 'Tipo de Office', type: 'select', options: ['No Aplica', 'Microsoft 365', 'Office 2021', 'Office 2019', 'Otro'] }, licenciaOffice: { label: 'Licencia Office', type: 'text' }, sede: { label: 'Sede', type: 'select', optionsSource: 'locations' }, estado: { label: 'Estado', type: 'select', options: ['En Uso', 'En Bodega', 'De Baja', 'En Reparaci√≥n'] }, observaciones: { label: 'Observaciones', type: 'textarea' } }}, phones: { title: 'Tel√©fonos', titleSingular: 'Tel√©fono', fields: { brand: { label: 'Marca', type: 'text' }, model: { label: 'Modelo', type: 'text' }, serial: { label: 'N/Serie', type: 'text' }, imei: { label: 'IMEI', type: 'text' }, phoneNumber: { label: 'N/Tel√©fono', type: 'text' }, user: { label: 'Usuario', type: 'text' } }}, cameras: { title: 'C√°maras', titleSingular: 'C√°mara', fields: { brand: { label: 'Marca', type: 'text' }, model: { label: 'Modelo', type: 'text' }, serial: { label: 'N/Serie', type: 'text' }, ipAddress: { label: 'Direcci√≥n IP', type: 'text' }, location: { label: 'Ubicaci√≥n F√≠sica', type: 'text' } }}, modems: { title: 'M√≥dems', titleSingular: 'M√≥dem', fields: { brand: { label: 'Marca', type: 'text' }, model: { label: 'Modelo', type: 'text' }, serial: { label: 'N/Serie', type: 'text' }, serviceProvider: { label: 'Proveedor de Internet', type: 'text' } }}, communicators: { title: 'Comunicadores', titleSingular: 'Comunicador', fields: { brand: { label: 'Marca', type: 'text' }, model: { label: 'Modelo', type: 'text' }, serial: { label: 'N/Serie', type: 'text' }, type: { label: 'Tipo (Satelital, Radio)', type: 'text' } }}, network: { title: 'Dispositivos de Red', titleSingular: 'Dispositivo de Red', fields: { type: { label: 'Tipo (Switch, Router, AP)', type: 'text' }, brand: { label: 'Marca', type: 'text' }, model: { label: 'Modelo', type: 'text' }, ipAddress: { label: 'Direcci√≥n IP', type: 'text' }, location: { label: 'Ubicaci√≥n F√≠sica', type: 'text' } }}, printers: { title: 'Impresoras', titleSingular: 'Impresora', fields: { brand: { label: 'Marca', type: 'text' }, model: { label: 'Modelo', type: 'text' }, serial: { label: 'N/Serie', type: 'text' }, ipAddress: { label: 'Direcci√≥n IP', type: 'text' }, type: { label: 'Tipo (L√°ser, Tinta)', type: 'text' } }} };
const credentialsCategoryConfig = { emails: { title: 'Correos Electr√≥nicos', titleSingular: 'Credencial de Correo', fields: { service: { label: 'Servicio (Google, O365)', type: 'text' }, email: { label: 'Correo Electr√≥nico', type: 'email' }, password: { label: 'Contrase√±a', type: 'text' }, notes: { label: 'Notas (MFA, Recuperaci√≥n)', type: 'textarea' } }}, computers: { title: 'Usuarios de Equipos', titleSingular: 'Usuario de Equipo', fields: { computerId: { label: 'ID/Nombre del Equipo', type: 'text' }, username: { label: 'Nombre de Usuario', type: 'text' }, password: { label: 'Contrase√±a', type: 'text' }, isAdmin: { label: '¬øEs Admin?', type: 'select', options: ['No', 'S√≠'] } }}, phones: { title: 'Usuarios de Tel√©fonos', titleSingular: 'Usuario de Tel√©fono', fields: { phoneId: { label: 'ID/Modelo del Tel√©fono', type: 'text' }, user: { label: 'Usuario Asignado', type: 'text' }, pin: { label: 'PIN/Contrase√±a', type: 'text' } }}, internet: { title: 'Usuarios de Internet', titleSingular: 'Acceso a Internet', fields: { provider: { label: 'Proveedor (ISP)', type: 'text' }, accountId: { label: 'ID de Cuenta/Usuario', type: 'text' }, password: { label: 'Contrase√±a', type: 'text' } }}, servers: { title: 'Servidores y BD', titleSingular: 'Acceso a Servidor/BD', fields: { host: { label: 'Host/IP', type: 'text' }, port: { label: 'Puerto', type: 'number' }, username: { label: 'Usuario', type: 'text' }, password: { label: 'Contrase√±a', type: 'text' }, dbName: { label: 'Nombre BD (Opcional)', type: 'text' } }}, software: { title: 'Licencias de Software', titleSingular: 'Licencia de Software', fields: { softwareName: { label: 'Nombre del Software', type: 'text' }, licenseKey: { label: 'Clave de Licencia', type: 'textarea' }, version: { label: 'Versi√≥n', type: 'text' } }}, others: { title: 'Otras Credenciales', titleSingular: 'Credencial', fields: { system: { label: 'Sistema/Servicio', type: 'text' }, url: { label: 'URL (Opcional)', type: 'text' }, username: { label: 'Usuario', type: 'text' }, password: { label: 'Contrase√±a', type: 'text' }, notes: { label: 'Notas', type: 'textarea' } }} };
function handleFirestoreError(error, element) { console.error("Firestore Error:", error); const indexLinkRegex = /(https:\/\/console\.firebase\.google\.com\/project\/.*?\/firestore\/indexes\?create_composite=.*?)"/; const match = error.message.match(indexLinkRegex); if (match) { const link = match[1]; element.innerHTML = `<tr><td colspan="5" style="color:red; text-align:left;"><strong>Error de Firebase:</strong> Se requiere un √≠ndice que no existe o a√∫n se est√° creando.<br><br><a href="${link}" target="_blank" style="color:blue; text-decoration:underline;">Haz clic aqu√≠ para crear el √≠ndice en una nueva pesta√±a.</a><br><br>Despu√©s de crearlo, espera unos minutos a que se habilite y luego recarga esta p√°gina.</td></tr>`; } else { element.innerHTML = `<tr><td colspan="5" style="color:red;">Error al cargar los datos: ${error.message}</td></tr>`; } }
async function renderDashboard(container) { /* ...c√≥digo completo... */ }
async function renderNewTicketForm(container) { /* ...c√≥digo completo... */ }
async function renderTicketList(container, params = {}) { /* ...c√≥digo completo... */ }
function renderGenericListPage(container, params, configObject, collectionName, icon) { /* ...c√≥digo completo... */ }
function renderMaintenanceCalendar(container) { /* ...c√≥digo completo... */ }
function renderConfiguracion(container) { /* ...c√≥digo completo... */ }
async function showFormModal(type, category = null) { /* ...c√≥digo completo... */ }
async function showTicketModal(ticketId) { /* ...c√≥digo completo... */ }
function showEventActionChoiceModal(eventId, eventTitle, eventProps) { /* ...c√≥digo completo... */ }
function showFinalizeTaskModal(eventId, eventTitle) { /* ...c√≥digo completo... */ }
function showCancelTaskModal(eventId, eventTitle) { /* ...c√≥digo completo... */ }

// --- 5. ROUTER Y L√ìGICA PRINCIPAL ---
const appContent = document.getElementById('app-content');
const navLinks = document.querySelectorAll('.nav-link');
const routes = { '#dashboard': renderDashboard, '#crear-ticket': renderNewTicketForm, '#tickets': renderTicketList, '#estadisticas': renderEstadisticas, '#maintenance': renderMaintenanceCalendar, '#configuracion': renderConfiguracion };
function router() { /* ...c√≥digo completo... */ }

// --- 6. AUTENTICACI√ìN Y PUNTO DE ENTRADA ---
document.addEventListener('DOMContentLoaded', () => { /* ...c√≥digo completo... */ });
